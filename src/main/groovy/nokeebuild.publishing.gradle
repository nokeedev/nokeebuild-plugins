plugins {
	id 'maven-publish'
}

Provider<String> slugProvider = providers.exec { commandLine('git', 'config', '--get', 'remote.origin.url') }
	.standardOutput.asText.map { url ->
		url = url.trim()
		if (url.startsWith('git@github.com')) {
			return url.substring(15) - '.git'
		} else if (url.startsWith('https://github.com')) {
			return url.substring(19) - '.git'
		}
		throw new UnsupportedOperationException()
	}

Provider<String> headBranchProvider = providers.exec { commandLine('git', 'remote', 'show', 'origin') }
	.standardOutput.asText.map { it.readLines().find { it.startsWith('  HEAD branch:') }.substring(15).trim() }

publishing {
	publications.withType(MavenPublication).all {
		pom {
			name = provider { "${groupId}:${artifactId}" }
			description = provider { project.description }
			inceptionYear = providers.exec {commandLine('git', 'log', '--reverse', '-1', '--pretty=format:%ad', '--date=format:%Y')}.standardOutput.asText

			url = slugProvider.map { "https://github.com/${it}" }
			scm {
				connection = slugProvider.map { slug -> "scm:git:git://github.com/${slug}.git" }
				developerConnection = slugProvider.map { slug -> "scm:git:ssh://github.com:${slug}.git" }
				url = slugProvider.zip(headBranchProvider) { slug, head -> "https://github.com/${slug}/tree/${head}" }
			}

			developers {
				developer {
					name = 'Daniel Lacasse'
					id = 'lacasseio'
				}
			}
			licenses {
				// TODO: AUTO DETECT (look for LICENSE)
				license {
					name = 'Apache License, Version 2.0'
					url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
				}
			}
		}
	}
}

pluginManager.withPlugin('java-gradle-plugin') {
	pluginManager.apply('com.gradle.plugin-publish')

	afterEvaluate {
		publishing.publications.withType(MavenPublication) {
			pom {
				name = provider { "${groupId}:${artifactId}" }
				description = provider { project.description }
			}
		}
	}
}
