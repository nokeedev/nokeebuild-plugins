pluginManager.withPlugin('jvm-test-suite') {
	testing.suites.withType(JvmTestSuite).configureEach {
		// versionCatalogs -> VersionCatalogsExtension
		//   each elements are VersionCatalog
		Set<String> junitJupiterVersions = new LinkedHashSet<>(versionCatalogs.collectMany {
			return it.findVersion('junit-jupiter').map { [it] }.orElse([])
		})

		// TODO: Account for version in gradle.properties
		if (junitJupiterVersions.empty) {
			useJUnitJupiter('latest.release')
		} else if (junitJupiterVersions.size() == 1) {
			useJUnitJupiter(junitJupiterVersions.first().toString())
		} else {
			throw new RuntimeException("mutliple JUnit versions founds: ${junitJupiterVersions}")
		}

		// Configure default tempdir cleanup
		targets.all {
			testTask.configure {
				systemProperty 'junit.jupiter.tempdir.cleanup.mode.default', 'ON_SUCCESS'
			}
		}

		// If we use @TestDirectory annotation, configure temp test directory under $buildDir/tmp
		targets.all {
			testTask.configure {
				def testTempDirectory = layout.buildDirectory.dir('tmp')
				jvmArgumentProviders.add({ ["-Ddev.nokee.commons.fixtures.test-directory.base-dir=${testTempDirectory.get().asFile.absolutePath}"] } as CommandLineArgumentProvider)
			}
		}

		// See https://github.com/gradle/gradle/issues/18647
		if (name == 'test') {
			targets.all {
				testTask.configure {
					jvmArgs('--add-opens=java.base/java.lang=ALL-UNNAMED')
				}
			}
		}
	}
}
